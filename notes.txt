

-------------Synchronous communication and Async Communication: --------

--> Synchronous communication:
        * one service depends on other service response
        * To make Http request use 'WebClient'
--> Asynchronous communication:
        * one response not depends on other service response
        * it doesn't care about other service response

    Eg:-

                        Http Request
     1. Order Service ---------------> Inventory service (checking stock is available or not)
                      <---------------
                         Response

         * Here order service waiting for inventory response , (Sync Communication)
         * If does not care about inventory service means (Async Communication)

---------------------------------------------------------------------------------

                         ** SERVICE DISCOVERY **

1. Also known as 'Discovery Server' , its place where the all services are located  and its instance
2. With the Netflix Eureka Server and client
3. If discovery server is shutdown or its not available, instance of the service stores locally
4. Default port for Eureka server = 8761

-----------------------------------------------------------------------------------

                          **  API-GATEWAY **

1. Its entry level
2. Routing requests from clients to the appropriate backend service and then returning the service’s response back to the client.
3. An API gateway can also perform tasks such as authentication, rate limiting, and caching.
4. Spring cloud Gateway provides a library for building an API Gateway
5. Important parts of Spring cloud Gateway
          1. Route: which contain the URL to which the request is to be forwarded to

          2. Predicates:the set of criteria that should match for the incoming requests to be forwarded to internal microservices.
          For example, a path predicate will forward the request only if the incoming URL contains that path.

          3. Filter: These act as the place where you can modify the incoming requests
           before sending the requests to the internal microservices or before responding back to the client.

--------------------------------------------------------------------------------------

                        ** Circuit Breakers **

1. If there is any issue while communicate with other service , that service have some network issue or db issue
circuit breakers will tack care of it
2. Three states of circuit breakers are
        1.Closed:When both services which are interacting are up and running(Communicating well)
        2.Open:As soon as the percentage of failing remote API calls is exceeding the given threshold,
         circuit breaker changes its state to OPEN state
        3.Half Open:After staying at OPEN state for a given timeout period,
        breaker automatically turns its state into HALF OPEN state

3.Resilience4j:
      *  Resilience4j is a lightweight, easy-to-use fault tolerance library inspired by
         Netflix Hystrix.

      *  It provides various features.

         Circuit Breaker — fault tolerance
         Rate Limiter — block too many requests
         Time Limiter — limit time while calling remote operations
         Retry Mechanism — automatic retry for failed operations
         Bulkhead — limit number of concurrent requests
         Cache — store results of costly remote operations

---------------------------------------------------------------------------------

                    ** Distributed tracing **

1. To trace the request from start to end
2. Trace id is entire flow id.
3. Span id is particular flow id
4.Spring Cloud Sleuth is used to generate and attach the trace id, span id to the logs so that these can then be used
 by tools like Zipkin and ELK for storage and analysis
5. Zipkin is a distributed tracing system. It helps gather timing data needed to troubleshoot
latency problems in service architectures. Features include both the collection and lookup of this data.